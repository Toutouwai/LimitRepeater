<?php

/**
 *
 * Limit Repeater
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class LimitRepeater extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Limit Repeater',
			'version' => 4,
			'summary' => 'Allows limits and restrictions to be placed on selected Repeater fields.',
			'autoload' => "template=admin",
			'icon' => 'list',
		);
	}

	/**
	 * Install
	 */
	public function ___install() {
		// create one row code to get things started
		$this->modules->saveModuleConfigData($this->className, array('codes' => uniqid() . '|') );
	}

	/**
	 * Upgrade
	 */
	public function ___upgrade($fromVersion, $toVersion) {
		// Upgrade from < v0.0.3
		if($fromVersion < 3) {
			// get existing config
			$cfg = $this->modules->getModuleConfigData($this->className());
			// convert roles field value to array
			foreach($cfg as $key => $value) {
				if(substr($key, 0, 4) === "role") {
					$cfg[$key] = array($value);
				}
			}
			// save config
			$this->modules->saveModuleConfigData($this->className, $cfg);
		}
	}

	/**
	 * Ready
	 */
	public function ready() {
		// add css and js for module config page
		$info = $this->getModuleInfo();
		$version = (int) $info['version'];
		$config = $this->config;
		if($this->input->get->name == $this->className) {
			$config->styles->add($config->urls->{$this->className} . "module_config.css?v=$version");
			$config->scripts->add($config->urls->{$this->className} . "module_config.js?v=$version");
		}

		// hooks
		$this->addHookAfter('AdminTheme::getExtraMarkup', $this, 'userBodyClasses');
		$this->addHookAfter('ProcessPageEdit::execute', $this, 'addScriptStyles');
		$this->addHookAfter('InputfieldRepeater::render', $this, 'appendToField');
		$this->addHookBefore('Modules::saveModuleConfigData', $this, 'processConfig');
	}

	/**
	 * Adds admin body classes based on $user
	 */
	public function userBodyClasses($event) {
		$object = $event->object;
		$user = $this->user;
		if(!$user->isSuperuser()) $object->addBodyClass('role-nonsuperuser');
		foreach($user->roles as $role) {
			$object->addBodyClass("role-{$role->name}");
		}
	}

	/**
	 * Append to rendered Repeater inputfield
	 */
	public function appendToField($event) {
		$inputfield = $event->object;
		$if_name = $inputfield->name;
		$field = $this->fields->get($if_name);
		if(!$field) {
			$name = substr($if_name, 0, strpos($if_name, '_repeater'));
			$field = $this->fields->get($name);
		}
		if(!$field) return;
		$f_name = $field->name;

		$cfg = $this->modules->getModuleConfigData($this->className());
		// early return if field is not in module config
		if(!in_array($f_name, $cfg)) return;

		$uniques = array();
		foreach($cfg as $key => $value) {
			if($value === $f_name) {
				$uniques[] = substr($key, -13); // last 13 characters are the unique code
			}
		}
		$out = '';
		$css = '';
		$call_checkRepeater = '';
		foreach($uniques as $unique) {
			if(!$cfg["role_{$unique}"]) continue; // role must not be empty
			foreach($cfg["role_{$unique}"] as $role) {
				$direct = ' > div > ul > li > label';
				$role_class = $role === 'role-all' ? '' : ".$role";
				$prefix = "body$role_class .Inputfield_{$if_name} $direct";
				if ($cfg["nodrag_{$unique}"]) $css .= "$prefix .InputfieldRepeaterDrag, ";
				if ($cfg["noclone_{$unique}"]) $css .= "$prefix .InputfieldRepeaterClone, ";
				if ($cfg["notoggle_{$unique}"]) $css .= "$prefix .InputfieldRepeaterToggle, ";
				if ($cfg["notrash_{$unique}"]) $css .= "$prefix .InputfieldRepeaterTrash, ";
				$css = rtrim($css, ', ');
				if ($css) $css .= " { display:none !important; }";
				$limit = $cfg["limit_{$unique}"];
				if($limit) $call_checkRepeater .= "checkRepeater('$role_class', '.Inputfield_{$if_name}', $limit);";
			}
		}
		if($css) $out .= "<style>$css</style>";
		if($call_checkRepeater) {
			$out .= "
<script>
$(function() {
	$call_checkRepeater
	$(document).ajaxComplete(function() {
		$call_checkRepeater
	});
});
</script>
			";
		}
		$event->return .= $out;
	}

	/**
	 * Add script and styles
	 */
	public function addScriptStyles($event) {
		// return if ProcessPageEdit is being loaded via AJAX (image field)
		if($this->config->ajax) return;

		$page = $event->object->getPage();
		$count = $page->fields->find('type=FieldtypeRepeater')->count();
		if(!$count) return; // early return if no Repeaters on this page

		// add JS function
		$config = $this->config;
		$info = $this->getModuleInfo();
		$version = (int) $info['version'];
		$config->scripts->add($config->urls->{$this->className} . "{$this->className}.js?v={$version}");

		// add CSS for hiding "Add New" buttons
		$event->return .= "<style>.InputfieldRepeaterAddItem.button-hide { display:none !important; }</style>";
	}

	/**
	 * Process the config data on save
	 */
	public function processConfig($event) {
		$module_name = $event->arguments('className');
		$cfg = $event->arguments('configData');
		if(is_object($module_name)) $module_name = $module_name->className();
		if($module_name !== $this->className()) return;

		// if the "Add another row" button was clicked
		if($cfg['add_new']) {
			$cfg['codes'] .= $cfg['unique'] . '|';
		}

		// if any rows were marked for deletion
		$delete_codes = array();
		foreach($cfg as $key => $value) {
			if (strpos($key, 'delete_') === 0 && $value === 1) {
				$delete_codes[] = substr($key, -13); // last 13 characters are the unique code;
			}
		}
		if(count($delete_codes)) {
			foreach($delete_codes as $delete_code) {
				$cfg['codes'] = str_replace("$delete_code|", '', $cfg['codes']);
			}
			foreach($cfg as $key => $value) {
				if($this->strposa($key, $delete_codes, 0)) {
					unset($cfg[$key]);
				}
			}
		}

		// return processed config
		$event->arguments('configData', $cfg);
	}

	/**
	 * strpos() with array of strings as needle
	 */
	public function strposa($haystack, $needle, $offset=0) {
		if(!is_array($needle)) $needle = array($needle);
		foreach($needle as $query) {
			if(strpos($haystack, $query, $offset) !== false) return true;
		}
		return false;
	}

	/**
	 * Config inputfields
	 */
	public function getModuleConfigInputfields() {
		$inputfields = new InputfieldWrapper();

		$inputfields->add( $this->makeCodes() );
		$inputfields->add( $this->makeUnique() );

		$codes = explode('|', rtrim($this->codes, '|'));
		$i = 1;
		foreach($codes as $code) {
			if(!$code) break;
			$inputfields->add( $this->makeFieldset($code, $i) );
			$i++;
		}

		$inputfields->add( $this->makeAddNew() );

		return $inputfields;
	}

	/**
	 * Make codes field
	 */
	public function makeCodes() {
		$f_name = 'codes';
		$f = $this->modules->get('InputfieldTextarea');
		$f->name = $f_name;
		$f->value = $this->$f_name;
		$f->collapsed = Inputfield::collapsedHidden;
		return $f;
	}

	/**
	 * Make unique field
	 */
	public function makeUnique() {
		$f = $this->modules->get('InputfieldText');
		$f->name = 'unique';
		$f->value = uniqid();
		$f->collapsed = Inputfield::collapsedHidden;
		return $f;
	}

	/**
	 * Make 'Add New' button
	 */
	public function makeAddNew() {
		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = 'add_new';
		$f->label = $this->_('Add another row');
		return $f;
	}

	/**
	 * Make fieldset
	 */
	public function makeFieldset($identifier, $number) {
		$fieldset = $this->modules->get('InputfieldFieldset');
		$fieldset->name = "row_{$identifier}";
		$fieldset->label = $this->_('Limited Repeater') . " $number";

		$f = $this->makeRepeaterFieldSelect($identifier);
		$fieldset->add($f);

		$f = $this->makeRolesSelect($identifier);
		$fieldset->add($f);

		$f = $this->makeNoDragCheckbox($identifier);
		$fieldset->add($f);

		$f = $this->makeNoCloneCheckbox($identifier);
		$fieldset->add($f);

		$f = $this->makeNoToggleCheckbox($identifier);
		$fieldset->add($f);

		$f = $this->makeNoTrashCheckbox($identifier);
		$fieldset->add($f);

		$f = $this->makeLimitInteger($identifier);
		$fieldset->add($f);

		$f = $this->makeDeleteCheckbox($identifier);
		$fieldset->add($f);

		return $fieldset;
	}

	/**
	 * Make checkbox for row deletion
	 */
	public function makeDeleteCheckbox($identifier) {
		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = "delete_{$identifier}";
		$f->label = $this->_('Delete');
		return $f;
	}

	/**
	 * Make select for Repeater field
	 */
	public function makeRepeaterFieldSelect($identifier) {
		$f_name = "repeater_{$identifier}";
		$f = $this->modules->get('InputfieldSelect');
		$f->name = $f_name;
		$f->label = $this->_('Repeater field');
		$f->required = true;
		$f->columnWidth = 50;
		$select_options = $this->fields->find("type=FieldtypeRepeater");
		$f->addOption(''); // first item blank
		foreach($select_options as $select_option) {
			$f->addOption($select_option->name, $select_option->label ?: $select_option->name);
		}
		$f->value = $this->$f_name;
		return $f;
	}

	/**
	 * Make AsmSelect for roles
	 */
	public function makeRolesSelect($identifier) {
		$f_name = "role_{$identifier}";
		$f = $this->modules->get('InputfieldAsmSelect');
		$f->name = $f_name;
		$f->label = $this->_('Roles to restrict');
		$f->required = true;
		$f->columnWidth = 50;
		$roles = $this->roles->find("name!=guest");
		foreach($roles as $select_option) {
			$f->addOption("role-{$select_option->name}", $select_option->name);
		}
		$f->addOption('role-nonsuperuser', $this->_('All non-superuser roles'));
		$f->addOption('role-all', $this->_('All roles'));
		$f->value = $this->$f_name;
		return $f;
	}

	/**
	 * Make checkbox for "No Drag" option
	 */
	public function makeNoDragCheckbox($identifier) {
		$f_name = "nodrag_{$identifier}";
		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = $f_name;
		$f->label = $this->_('Prevent drag');
		$f->columnWidth = 20;
		$f->attr("checked", $this->$f_name === 1 ? "checked" : "");
		return $f;
	}

	/**
	 * Make checkbox for "No Clone" option
	 */
	public function makeNoCloneCheckbox($identifier) {
		$f_name = "noclone_{$identifier}";
		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = $f_name;
		$f->label = $this->_('Prevent clone');
		$f->columnWidth = 20;
		$f->attr("checked", $this->$f_name === 1 ? "checked" : "");
		return $f;
	}

	/**
	 * Make checkbox for "No Toggle" option
	 */
	public function makeNoToggleCheckbox($identifier) {
		$f_name = "notoggle_{$identifier}";
		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = $f_name;
		$f->label = $this->_('Prevent publish toggle');
		$f->columnWidth = 20;
		$f->attr("checked", $this->$f_name === 1 ? "checked" : "");
		return $f;
	}

	/**
	 * Make checkbox for "No Trash" option
	 */
	public function makeNoTrashCheckbox($identifier) {
		$f_name = "notrash_{$identifier}";
		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = $f_name;
		$f->label = $this->_('Prevent trash');
		$f->columnWidth = 20;
		$f->attr("checked", $this->$f_name === 1 ? "checked" : "");
		return $f;
	}

	/**
	 * Make integer for limit
	 */
	public function makeLimitInteger($identifier) {
		$f_name = "limit_{$identifier}";
		$f = $this->modules->get('InputfieldInteger');
		$f->name = $f_name;
		$f->label = $this->_('Limit');
		$f->columnWidth = 20;
		$f->inputType = 'number';
		$f->min = 0;
		$f->max = 200;
		$f->value = $this->$f_name;
		return $f;
	}

}